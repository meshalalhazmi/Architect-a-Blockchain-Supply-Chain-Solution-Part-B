// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originBakerID = accounts[1]
    const originBakerName = "John Doe"
    const originBakerInformation = "Yarray Valley"
     var productID = sku + upc
    const productNotes = "Best Dduble chocolate cookies"
    const productPrice = web3.toWei(1, "ether")
    var itemState = 0
    const deliveryAgentID = accounts[2]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Baker: accounts[1] ", accounts[1])
    console.log("deliveryAgentID: accounts[2] ", accounts[2])
    console.log("Consumer: accounts[4] ", accounts[4])

    // 1st Test
    it("Testing smart contract function bakeCookies() that allows a baker to bake cookies", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Baked()
        var event = supplyChain.Baked()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Harvested by calling function harvestItem()
        await supplyChain.bakeCookies(upc, originBakerID, originBakerName, originBakerInformation, productNotes,productPrice)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0].toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originBakerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originBakerID, 'Error: Missing or Invalid originBakerID')
        assert.equal(resultBufferOne[4], originBakerName, 'Error: Missing or Invalid originBakerName')
        assert.equal(resultBufferOne[5], originBakerInformation, 'Error: Missing or Invalid originBakerInformation')
         assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    // 2nd Test
    it("Testing smart contract function addCookieJarToOnlineStore() that allows a baker to process cookies", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        
        var eventEmitted = false
         // Watch the emitted event Processed()
        var event = supplyChain.ForSale()
        await event.watch((err, res) => {
            eventEmitted = true
        })
 

        // Mark an item as forSale by calling function addCookieJarToOnlineStore()
        await supplyChain.addCookieJarToOnlineStore(upc,{from: originBakerID})

         
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)


        // Verify the result set
        
         assert.equal(resultBufferOne[0].toNumber(), sku, 'Error: Invalid item SKU')
         assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
         assert.equal(resultBufferOne[2], originBakerID, 'Error: Missing or Invalid ownerID')
         assert.equal(resultBufferOne[3], originBakerID, 'Error: Missing or Invalid originBakerID')
         assert.equal(resultBufferOne[4], originBakerName, 'Error: Missing or Invalid originBakerName')
         assert.equal(resultBufferOne[5], originBakerInformation, 'Error: Missing or Invalid originBakerInformation')
          assert.equal(resultBufferTwo[5], 1, 'Error: Invalid item State')
         assert.equal(eventEmitted, true, 'Invalid event emitted')  
    })    

    // 3rd Test
    it("Testing smart contract function buyCookieJar() that allows a consumer to buy cookies", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        
        var eventEmitted = false
         // Watch the emitted event Processed()
        var spldEvent = supplyChain.Sold()
        await spldEvent.watch((err, res) => {
            eventEmitted = true
        })
        var addConsumerEvent = supplyChain.ConsumerAdded()
        await addConsumerEvent.watch((err, res) => {
            eventEmitted = true
        })
 
         var paidAmount =  web3.toWei("2", "ether")
        // Mark an item as Sold by calling function buyCookieJar()

        await supplyChain.addConsumer(consumerID,{from: ownerID})
        await supplyChain.buyCookieJar(upc,{from: consumerID,value: paidAmount})

         
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)


        // Verify the result set
        
         assert.equal(resultBufferOne[0].toNumber(), sku, 'Error: Invalid item SKU')
         assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
         assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
         assert.equal(resultBufferOne[3], originBakerID, 'Error: Missing or Invalid originBakerID')
         assert.equal(resultBufferOne[4], originBakerName, 'Error: Missing or Invalid originBakerName')
         assert.equal(resultBufferOne[5], originBakerInformation, 'Error: Missing or Invalid originBakerInformation')
          assert.equal(resultBufferTwo[5], 2, 'Error: Invalid item State')
          assert.equal(resultBufferTwo[7], consumerID, 'Error: Missing or Invalid consumerID')
         assert.equal(eventEmitted, true, 'Invalid event emitted')  
         

        
        
    })    

    // 4th Test
    it("Testing smart contract function shipCookieJar() that allows a baker to ship cookie jars", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        // Watch the emitted event Processed()
       var event = supplyChain.Shipped()
       await event.watch((err, res) => {
           eventEmitted = true
       })
        
         

        // Mark an item as ForSale by calling function shipCookieJar()
        await supplyChain.shipCookieJar(upc,deliveryAgentID,{from: originBakerID})


          
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)


        // Verify the result set
        
         assert.equal(resultBufferOne[0].toNumber(), sku, 'Error: Invalid item SKU')
         assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
         assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
         assert.equal(resultBufferOne[3], originBakerID, 'Error: Missing or Invalid originBakerID')
         assert.equal(resultBufferOne[4], originBakerName, 'Error: Missing or Invalid originBakerName')
         assert.equal(resultBufferOne[5], originBakerInformation, 'Error: Missing or Invalid originBakerInformation')
          assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State')
          assert.equal(resultBufferTwo[6], deliveryAgentID, 'Error: Missing or Invalid deliveryAgentID')

          assert.equal(resultBufferTwo[7], consumerID, 'Error: Missing or Invalid consumerID')
         assert.equal(eventEmitted, true, 'Invalid event emitted')  
 
          
    })    

    // 5th Test
    it("Testing smart contract function DeleverCookieJAr() that allows a deliveryAgent to delever the item", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        // Watch the emitted event Processed()
       var event = supplyChain.Delivered()
       await event.watch((err, res) => {
           eventEmitted = true
       })

       var addDeliveryAgent = supplyChain.deliveryAgentAdded()
       await addDeliveryAgent.watch((err, res) => {
           eventEmitted = true
       })

        
    //     // Mark an item as ForSale by calling function shipCookieJar()
        await supplyChain.addDeliveryAgent(deliveryAgentID,{from: ownerID})
        await supplyChain.DeleverCookieJAr(upc,{from: deliveryAgentID})
 

          
    //     // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)


    //     // Verify the result set
        
         assert.equal(resultBufferOne[0].toNumber(), sku, 'Error: Invalid item SKU')
         assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
         assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
         assert.equal(resultBufferOne[3], originBakerID, 'Error: Missing or Invalid originBakerID')
         assert.equal(resultBufferOne[4], originBakerName, 'Error: Missing or Invalid originBakerName')
         assert.equal(resultBufferOne[5], originBakerInformation, 'Error: Missing or Invalid originBakerInformation')
          assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State')
          assert.equal(resultBufferTwo[6], deliveryAgentID, 'Error: Missing or Invalid deliveryAgentID')

          assert.equal(resultBufferTwo[7], consumerID, 'Error: Missing or Invalid consumerID')
         assert.equal(eventEmitted, true, 'Invalid event emitted')  
         
        
    })    

    // 6th Test
    it("Testing smart contract function receiveItem() that allows a consumer to receive the cookie jar", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        // Watch the emitted event Processed()
       var event = supplyChain.Received()
       await event.watch((err, res) => {
           eventEmitted = true
       })
        
    //     // Mark an item as ForSale by calling function shipCookieJar()
 
         await supplyChain.receiveItem(upc,{from: consumerID})
            
          
    //     // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)


    //     // Verify the result set
        
         assert.equal(resultBufferOne[0].toNumber(), sku, 'Error: Invalid item SKU')
         assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
         assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
         assert.equal(resultBufferOne[3], originBakerID, 'Error: Missing or Invalid originBakerID')
         assert.equal(resultBufferOne[4], originBakerName, 'Error: Missing or Invalid originBakerName')
         assert.equal(resultBufferOne[5], originBakerInformation, 'Error: Missing or Invalid originBakerInformation')
          assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State')
          assert.equal(resultBufferTwo[6], deliveryAgentID, 'Error: Missing or Invalid deliveryAgentID')

          assert.equal(resultBufferTwo[7], consumerID, 'Error: Missing or Invalid consumerID')
         assert.equal(eventEmitted, true, 'Invalid event emitted')  
         
              
    })    

    
    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
      
        
        // Verify the result set:
        assert.equal(resultBufferOne[0].toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originBakerID, 'Error: Missing or Invalid originBakerID')
        assert.equal(resultBufferOne[4], originBakerName, 'Error: Missing or Invalid originBakerName')
        assert.equal(resultBufferOne[5], originBakerInformation, 'Error: Missing or Invalid originBakerInformation')
 
     })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        
        // Verify the result set:
        assert.equal(resultBufferTwo[0].toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2].toNumber(), productID, 'Error: Invalid productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Invalid productNotes')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid productPrice')
        assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], deliveryAgentID, 'Error: Missing or Invalid deliveryAgentID')
        assert.equal(resultBufferTwo[7], consumerID, 'Error: Missing or Invalid consumerID')
      })

});

